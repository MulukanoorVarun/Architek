import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:arkitek_app/blocs/project/project_bloc.dart';
import 'package:arkitek_app/models/project.dart';
import 'package:arkitek_app/theme/spacing.dart';

class PostProjectScreen extends StatefulWidget {
  const PostProjectScreen({super.key});

  @override
  State<PostProjectScreen> createState() => _PostProjectScreenState();
}

class _PostProjectScreenState extends State<PostProjectScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _locationController = TextEditingController();
  double _minBudget = 5000;
  double _maxBudget = 50000;
  DateTime _startDate = DateTime.now();
  List<String> _requirements = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Post New Project'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(AppSpacing.md),
          children: [
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(
                labelText: 'Project Title',
                hintText: 'Enter project title',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a title';
                }
                return null;
              },
            ),
            const SizedBox(height: AppSpacing.md),
            TextFormField(
              controller: _descriptionController,
              maxLines: 3,
              decoration: const InputDecoration(
                labelText: 'Description',
                hintText: 'Describe your project',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a description';
                }
                return null;
              },
            ),
            const SizedBox(height: AppSpacing.md),
            TextFormField(
              controller: _locationController,
              decoration: const InputDecoration(
                labelText: 'Location',
                hintText: 'Project location',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a location';
                }
                return null;
              },
            ),
            const SizedBox(height: AppSpacing.md),
            Text(
              'Budget Range',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            RangeSlider(
              values: RangeValues(_minBudget, _maxBudget),
              min: 5000,
              max: 500000,
              divisions: 99,
              labels: RangeLabels(
                '\$${_minBudget.round()}',
                '\$${_maxBudget.round()}',
              ),
              onChanged: (RangeValues values) {
                setState(() {
                  _minBudget = values.start;
                  _maxBudget = values.end;
                });
              },
            ),
            const SizedBox(height: AppSpacing.md),
            ElevatedButton(
              onPressed: _submitProject,
              child: const Text('Post Project'),
            ),
          ],
        ),
      ),
    );
  }

  void _submitProject() {
    if (_formKey.currentState!.validate()) {
      final project = Project(
        id: '', // Will be generated by backend
        title: _titleController.text,
        description: _descriptionController.text,
        requirements: _requirements,
        budget: Budget(
          min: _minBudget,
          max: _maxBudget,
          currency: 'USD',
        ),
        location: _locationController.text,
        timeline: Timeline(
          startDate: _startDate.toIso8601String(),
        ),
        status: 'open',
        clientId: '', // Will be set from auth
        createdAt: DateTime.now().toIso8601String(),
        updatedAt: DateTime.now().toIso8601String(),
      );

      context.read<ProjectBloc>().add(CreateProject(project));
    }
  }
}